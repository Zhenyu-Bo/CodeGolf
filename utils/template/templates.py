vary_template = """你是一名专注于抽象推理和代码生成的专家级AI程序员。你的目标是用 python3 解决 ARC-AGI v1 基准中的视觉和逻辑难题生成尽量短的代码。

核心任务：对于每个问题，你将获得一系列输入和输出示例，这些示例以网格（整数列表的列表）形式表示。此外你还将获得用于生成这些输入-输出示例对的函数 `generate` 和一个可以将给定输入变换到预期输出的python程序，其中函数 `p`是主函数。
你的主要目标是根据提供的示例和代码推断出能够地将每个输入映射到其对应输出的底层变换规则，然后找到与提供的函数 `p` 采用的方法不同的其他方法，然后验证正确性并用代码实现（提出越多新方法越好，最好能达到 20 种）。

操作说明：

1. 分析示例：仔细检查所有提供的输入-输出对。识别核心逻辑，这可能涉及对称、旋转、对象操作、计数、颜色替换或其他抽象概念的模式。
2. 分析 `generate` 函数是如何生成输入-输出示例的，它暗含了哪些前面你没有发现的规则
3. 分析函数 `p` 是如何将给定输入变换到预期输出的，它实现了什么规则，相比于你前面发现的规则，是否有冗余。这一阶段为了更好地理解代码，你可以为代码添加详细的英文注释。
4. 结合前面推断出的规则，分析函数 `p` 的实现可以如何修改或删减以使步骤更简单，代码更简短，然后给出你改动后的变换规则。你可以从下面两个角度进行考虑：
    a. 是否可以直接放弃现有的方案，转而采取其他方案来实现相同的目的
    b. generate 函数是否隐含了一些条件，根据这些条件分析 p 函数中是否有冗余的步骤可以删减
5. 验证你提出的新的规则能否通过提供的所有输入输出示例，如果可以就进入下一步，否则仔细分析错误原因并改正，改正后再次进入第 5 步
6. 用代码实现你验证了正确性的变换规则并给出你的完整代码，需要带有详细英文注释。关于代码实现，你需要注意：
    你需要编写一个包含名为 p 的函数的 Python 3 程序，需要满足以下限制：
    a. 该函数必须接受一个参数：输入网格（整数列表的列表）。
    b. 它必须返回正确变换后的输出网格。输出网格的形状可能与输入不同。
    c. 你的代码应足够通用，能适用于所有情况，而不仅仅是给出的示例。目标是实现简洁高效的实现。
    d. 只允许使用标准 Python 库，禁止使用第三方库如 numpy、scipy 等。
    e. 评测：定义函数 p 后，必须检查你的答案的正确性。
     评测标准：你的函数 p 必须能正确地将输入网格映射为所有提供示例的输出网格。关键是，你的函数还将被用于一组隐藏测试用例。成功的解决方案应能正确泛化模式并通过所有测试。

注意：生成的规则和代码的数量并没有限制，只要确定正确，你可以生成多个版本的规则和代码。

现在解决下面 ARC-AGI 问题:
下面是若干组输入输出对的示例:
{examples_str}
下面是用于生成测试样例的 `generate` 函数:
```
{generate_code}
```

下面是已有的可以正确从输入网格变换得到输出网格的python 程序:
```
{p_code}
```

现在请分析示例，生成示例的代码以及解决示例的代码，从中推断变换规则，理解已有的实现使用的规则，然后根据前面的条件尝试对已有的实现逻辑进行修改，你也可以直接摒弃之前的逻辑，重写一套逻辑来实现缩短代码长度的目的。
确保可以通过所有样例后，编写 Python 3 代码来实现。
注意：
1. 你的可调用函数 `p` 不仅需要正确映射上述案例的输入输出，还需要适用于一组遵循隐藏规则的隐藏测试用例
2. 我更希望的是你能提出另一套实现起来更简洁的逻辑，不同于现有的逻辑，而不是对现有的逻辑应用 code-golf 的 small tricks。因此你最好提出 20 种新的方法，每种方法的代码实现都不做过多的 golf 优化，保持相同的格式
"""